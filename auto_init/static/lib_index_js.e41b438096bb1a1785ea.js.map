{"version":3,"file":"lib_index_js.e41b438096bb1a1785ea.js","mappings":";;;;;;;;;;;;;AAAA,iEAAe,20CAA20C;;;;;;;;;;;;;;;;;;;;;;;;;ACAlyC;AACH;AACJ;AACJ;AACO;AACN;AAC9C,wBAAwB,8DAAO;AAC/B;AACA,YAAY,uDAAa;AACzB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kEAAgB,EAAE,2DAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,+BAA+B,+DAAa;AAC5C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://auto_init/./style/init.svg","webpack://auto_init/./lib/index.js"],"sourcesContent":["export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 448.07 373.91\\\">\\n    <g xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"jp-icon2\\\" fill=\\\"#424242\\\">\\n        <g id=\\\"Layer_4\\\" data-name=\\\"Layer 4\\\">\\n            <polygon class=\\\"auto-init-play-icon\\\" points=\\\"204.68 127.38 264.68 187.38 204.68 247.38 204.68 127.38\\\" />\\n        </g>\\n        <g id=\\\"Layer_3\\\" data-name=\\\"Layer 3\\\">\\n            <path class=\\\"auto-init-circular-arrow\\\"\\n                d=\\\"M370.45,386a175.11,175.11,0,0,1-214.56,14.57A177.09,177.09,0,0,1,96,331.29a174.7,174.7,0,0,1-14.25-43.92\\\"\\n                transform=\\\"translate(-29.82 -68.62)\\\" />\\n            <path class=\\\"auto-init-circular-arrow-head\\\"\\n                d=\\\"M41.82,322.7a186.53,186.53,0,0,1,37.4-56.29C95.9,279.7,114,289,132.16,294.12\\\"\\n                transform=\\\"translate(-29.82 -68.62)\\\" />\\n            <path class=\\\"auto-init-circular-arrow\\\"\\n                d=\\\"M137.25,125.11a175.09,175.09,0,0,1,214.56-14.57,176.88,176.88,0,0,1,59.85,69.32,174.72,174.72,0,0,1,14.26,43.92\\\"\\n                transform=\\\"translate(-29.82 -68.62)\\\" />\\n            <path class=\\\"auto-init-circular-arrow-head\\\"\\n                d=\\\"M465.88,188.45a186.53,186.53,0,0,1-37.4,56.29c-16.68-13.29-34.75-22.59-52.94-27.71\\\"\\n                transform=\\\"translate(-29.82 -68.62)\\\" />\\n        </g>\\n    </g>\\n</svg>\";","import { INotebookTracker } from '@jupyterlab/notebook';\nimport { ToolbarButton } from \"@jupyterlab/apputils\";\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { CodeCell } from \"@jupyterlab/cells\";\nimport { LabIcon } from \"@jupyterlab/ui-components\";\nimport run_init_icon from \"../style/init.svg\";\nconst runInitIcon = new LabIcon({\n    name: 'auto_init:init',\n    svgstr: run_init_icon\n});\nconst INIT = 'init_cell';\nconst EXT = 'auto_init';\nconst MKDOWN = 'markdown';\nconst CODE = 'code';\nconst run_init_label = 'Run all cells marked as initialization';\nconst manualInit = (tracker) => {\n    const notebook = tracker.currentWidget;\n    if (notebook !== null)\n        runInitCells(notebook);\n};\nconst runInitCells = (notebook) => {\n    console.log(\"Initializing cells\");\n    notebook.content.widgets.map((cell) => {\n        const metadata = cell.model.metadata;\n        if (metadata.get(INIT)) {\n            cell.addClass(EXT + '-cell');\n            switch (cell.model.type) {\n                case CODE:\n                    const code = cell;\n                    CodeCell.execute(code, notebook.sessionContext);\n                    break;\n                case MKDOWN:\n                    const ce = cell;\n                    ce.rendered = true;\n                default:\n                    break;\n            }\n        }\n    });\n};\nfunction toggleInit(tracker) {\n    let cell = tracker.activeCell;\n    if (cell !== null) {\n        let metadata = cell.model.metadata;\n        if (metadata.get(INIT)) {\n            metadata.set(INIT, false);\n            cell.removeClass(EXT + '-cell');\n        }\n        else {\n            metadata.set(INIT, true);\n            cell.addClass(EXT + '-cell');\n        }\n        console.log(metadata.get(INIT));\n    }\n}\nclass InitManager {\n    constructor() {\n        this.states = new Map();\n    }\n    init(notebookPanel) {\n        const id = notebookPanel.id;\n        if (!this.states.get(id)) {\n            this.states.set(id, true);\n            runInitCells(notebookPanel);\n        }\n    }\n    resetNotebook(id) {\n        this.states.set(id, false);\n    }\n}\n/**\n * Initialization data for the auto_init extension.\n */\nconst plugin = {\n    id: 'auto_init:plugin',\n    autoStart: true,\n    requires: [INotebookTracker, IMainMenu],\n    activate: (app, tracker, mainmenu) => {\n        console.log('JupyterLab extension auto_init is activated!');\n        const toggle_init = EXT + ':toggle_init';\n        const runcommand = EXT + ':run_init';\n        const manager = new InitManager();\n        const runMenu = mainmenu.runMenu;\n        app.commands.addCommand(toggle_init, {\n            label: 'Toggle cell as initialization cell',\n            execute: () => {\n                toggleInit(tracker);\n            }\n        });\n        app.commands.addCommand(runcommand, {\n            label: run_init_label,\n            execute: () => {\n                const notebookPanel = tracker.currentWidget;\n                if (notebookPanel !== null)\n                    runInitCells(notebookPanel);\n            }\n        });\n        let runAllButton = new ToolbarButton({\n            actualOnClick: true,\n            onClick: () => {\n                manualInit(tracker);\n            },\n            icon: runInitIcon,\n            tooltip: run_init_label\n        });\n        tracker.widgetAdded.connect((_, notebookPanel) => {\n            const toolbar = notebookPanel.toolbar;\n            notebookPanel.sessionContext.connectionStatusChanged.connect((_, status) => {\n                console.log(status);\n                if (status == 'connected')\n                    manager.resetNotebook(notebookPanel.id);\n            });\n            toolbar.insertItem(10, \"run_init\", runAllButton);\n        });\n        tracker.currentChanged.connect((_, notebookPanel) => {\n            if (notebookPanel !== null) {\n                notebookPanel.context.ready.then(async () => {\n                    return notebookPanel.sessionContext.ready;\n                }).then(() => {\n                    manager.init(notebookPanel);\n                });\n            }\n        });\n        console.log(tracker.selectionChanged.connect((_, panel) => {\n            if (panel !== null) {\n                runAllButton.enabled = true;\n            }\n        }));\n        app.contextMenu.addItem({\n            selector: '.jp-Cell',\n            command: toggle_init,\n            rank: 0\n        });\n        runMenu.addGroup([{\n                command: runcommand\n            }]);\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}