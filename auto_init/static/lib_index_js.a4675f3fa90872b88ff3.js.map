{"version":3,"file":"lib_index_js.a4675f3fa90872b88ff3.js","mappings":"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","sources":["webpack://auto_init/./style/init.svg","webpack://auto_init/./src/index.ts"],"sourcesContent":["export default \"<svg id=\\\"Layer_5\\\" data-name=\\\"Layer 5\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 343.95 340\\\">\\n    <g xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"jp-icon2\\\" stroke=\\\"#424242\\\">\\n        <path d=\\\"M260.23,106a150,150,0,1,1-87.52,28.16\\\" transform=\\\"translate(-86.27 -86)\\\"\\n            style=\\\"stroke-linecap:round;stroke-miterlimit:10;stroke-width:40px\\\" />\\n        <polyline points=\\\"15.5 46.29 92.69 39.53 99.44 116.72\\\"\\n            style=\\\"stroke-linecap:round;stroke-linejoin:round;stroke-width:31px\\\" />\\n        <polygon points=\\\"157.45 110 217.45 170 157.45 230 157.45 110\\\"\\n            style=\\\"stroke-linejoin:round;stroke-width:34px\\\" />\\n    </g>\\n</svg>\";","import {\n    JupyterFrontEnd,\n    JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport {\n    INotebookTracker,\n    NotebookPanel\n} from '@jupyterlab/notebook';\nimport { ToolbarButton } from \"@jupyterlab/apputils\";\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { Cell, MarkdownCell, CodeCell } from \"@jupyterlab/cells\";\nimport { LabIcon } from \"@jupyterlab/ui-components\";\n\nimport run_init_icon from \"../style/init.svg\";\n\nconst runInitIcon = new LabIcon({\n  name: 'auto_init:init',\n  svgstr: run_init_icon\n});\n\nconst INIT: string = 'init_cell';\nconst EXT: string = 'auto_init';\nconst MKDOWN: string = 'markdown';\nconst CODE: string = 'code'\nconst run_init_label = 'Run all cells marked as initialization';\n\nconst manualInit = (tracker: INotebookTracker) => {\n    const notebook: NotebookPanel | null = tracker.currentWidget;\n    if (notebook !== null)\n        runInitCells(notebook);\n}\n\nconst runInitCells = (notebook: NotebookPanel) => {\n    console.log(\"Initializing cells\");\n    notebook.content.widgets.map((cell: Cell) => {\n        const metadata = cell.model.metadata;\n        if (metadata.get(INIT)) {\n            cell.addClass(EXT + '-cell');\n            switch (cell.model.type) {\n                case CODE:\n                    const code = cell as CodeCell;\n                    CodeCell.execute(code, notebook.sessionContext);\n                    break;\n                case MKDOWN:\n                    const ce: MarkdownCell = cell as MarkdownCell;\n                    ce.rendered = true;\n                default:\n                    break;\n            }\n        }    \n    });\n}\n\nfunction toggleInit(tracker: INotebookTracker) {\n    let cell: Cell | null = tracker.activeCell;\n    if (cell !== null) {\n        let metadata = cell.model.metadata;\n        if (metadata.get(INIT)) {\n            metadata.set(INIT, false);\n            cell.removeClass(EXT + '-cell');\n        } else {\n            metadata.set(INIT, true);\n            cell.addClass(EXT + '-cell');\n        }\n        console.log(metadata.get(INIT))\n    }\n}\n\nclass InitManager {\n    states: Map<string, boolean>;\n    constructor() {\n        this.states = new Map();\n    }\n\n    public init(notebookPanel: NotebookPanel) {\n        const id: string = notebookPanel.id\n        if (!this.states.get(id)) {\n            this.states.set(id, true);\n            runInitCells(notebookPanel);\n        }\n    }\n\n    public resetNotebook(id: string) {\n        this.states.set(id, false);\n    }\n}\n\n/**\n * Initialization data for the auto_init extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n    id: 'auto_init:plugin',\n    autoStart: true,\n    requires: [ INotebookTracker, IMainMenu],\n    activate: (app: JupyterFrontEnd, tracker: INotebookTracker, mainmenu: IMainMenu) => {\n        console.log('JupyterLab extension auto_init is activated!');\n        \n        const toggle_init: string = EXT + ':toggle_init';\n        const runcommand: string = EXT + ':run_init';\n        const manager = new InitManager();\n        const runMenu = mainmenu.runMenu;\n\n        app.commands.addCommand(toggle_init, {\n            label: 'Toggle cell as initialization cell',\n            execute: () => {\n                toggleInit(tracker);\n            }\n        });\n        app.commands.addCommand(runcommand, {\n            label: run_init_label,\n            execute: () => {\n                const notebookPanel = tracker.currentWidget;\n                if (notebookPanel !== null)\n                    runInitCells(notebookPanel);\n            }\n        });\n\n        let runAllButton = new ToolbarButton({\n            actualOnClick: true,\n            onClick: () => {\n                manualInit(tracker)\n            },\n            icon: runInitIcon,\n            tooltip: run_init_label\n        });\n        \n        tracker.widgetAdded.connect((_, notebookPanel:NotebookPanel) => {\n            const toolbar = notebookPanel.toolbar;\n            notebookPanel.sessionContext.connectionStatusChanged.connect((_, status) => {\n                console.log(status);\n                if (status == 'connected')\n                    manager.resetNotebook(notebookPanel.id);\n            });\n            toolbar.insertItem(10, \"run_init\", runAllButton);\n        });\n\n        tracker.currentChanged.connect((_, notebookPanel) => {\n            if (notebookPanel !== null) {\n                notebookPanel.context.ready.then(async () => {\n                    return notebookPanel.sessionContext.ready;\n                }).then(() => {\n                    manager.init(notebookPanel);   \n                });\n            }\n        });\n\n        console.log(tracker.selectionChanged.connect((_, panel) => {\n            if (panel !== null) {\n                runAllButton.enabled = true;\n            }\n        }));\n\n        app.contextMenu.addItem({\n            selector: '.jp-Cell',\n            command: toggle_init,\n            rank: 0\n        })\n\n        runMenu.addGroup([{\n            command: runcommand\n        }]);\n    }\n};\n\nexport default plugin;"],"names":[],"sourceRoot":""}